//This is where the server will get its informations from the database in order to display on the view, and handle events as the user navigates through the website.
var http = require("http");
var qString = require("querystring");
let express = require("express");
let app = express();
var ObjectID = require('mongodb').ObjectId;
let database = require('./database');
let mongoose = require('mongoose');
mongoose.set('bufferCommands', false);
let bp = require('body-parser');
let session = require('express-session');

app.use(session({
	secret:'thisisthesecretmessage',
	saveUninitialized: false,
	resave: false
}));

app.use(bp.urlencoded({ extended: true }));

app.listen(3000, async ()=> {
    //start and wait for the DB connection
    try{
        await mongoose.connect('mongodb://127.0.0.1/workoutWebsite', {useNewUrlParser: true, useUnifiedTopology: true })
		await database.get("workoutWebsite");
    } catch (e){
        console.log(e.message);
    }

    console.log("Server is running...");
});

async function docifyWorkout(userName, workoutName, exercises) {
  let workoutDoc = {
    userName: userName,
    workoutName: workoutName,
    exercises: exercises
  };


  return workoutDoc;
}


function convertToIndexedObject(exercisesArray) {
  let indexedExercises = {};
  exercisesArray.forEach((exercise, index) => {
    indexedExercises[index.toString()] = exercise;
  });
  return indexedExercises;
}


app.set('views', './views');
app.set('view engine', 'pug');


app.get('/', async function (req, res){
	res.render('homepage')
});

app.get('/login', async function (req, res){
	res.render('login_page')
});

app.get('/workout/', async function (req, res, next) {
	const exerciseCol = database.collection('exercises');
	try {
	  const chestExs = await exerciseCol.find({ Group: 'Chest' }).toArray();
    const backExs = await exerciseCol.find({ Group: 'Back' }).toArray();
    const armExs = await exerciseCol.find({ Group: 'Shoulders/Arms' }).toArray();
    const legExs = await exerciseCol.find({ Group: 'Legs' }).toArray();
    let workout = req.session.workout;

	  res.render('workout_page', { chestExs, backExs, armExs, legExs, workout });
	} catch (e) {
	  console.log('Error!', e);
	  next(e);
	}
  });

  
  app.post('/workout/add', async (req, res) => {
    const { Name } = req.body;
    let workout = req.session.workout || { exercises: [] };
    workout.exercises.push(Name);
    req.session.workout = workout;
    console.log(req.session.workout);
    res.redirect('/workout/');
  });
  

  app.post('/workout/save', async (req, res) => {
    const workoutName = req.session.workoutName;
    const workout = req.session.workout;
    
    const indexedExercises = convertToIndexedObject(workout.exercises);
  
    try {
       let workoutDoc = await docifyWorkout("Testing Name", workoutName, indexedExercises )
        await database.collection('workouts').insertOne(workoutDoc);
        delete req.session.workout;
        res.redirect('/commWorkout/');
  
    } catch (err) {
        console.error('Error saving workout:', err);
        res.status(500).json({ success: false, message: 'Error saving workout' });
    }
  });

app.post('/workout/reset', (req, res) => {
  delete req.session.workout;
  res.redirect('/workout/');
});

  

app.get('/myWorkout', async function (req, res, next){
    try {
       
        let workouts = await database.get("workoutWebsite").collection("workouts").find();
        console.log(workouts);
        res.render('myWorkout');
    } catch (e) {
        console.log("Error!", e);
        next(e);
    }
});

app.get('/commWorkout', async function (req, res, next){
  try {
      let workoutsCursor = await database.get("workoutWebsite").collection("workouts").find();
      let workouts = await workoutsCursor.toArray();
      console.log(workouts);
      res.render('commWorkout', { workouts: workouts });
  } catch (e) {
      console.log("Error!", e);
      next(e);
  }
});

app.use('*', function(req, res){
    res.writeHead(404);
    res.end(`<h1> ERROR 404. ${req.url} NOT FOUND</h1><br><br>`);
});
app.use((err, req, res, next)=>{
	res.status(500).render('error', {message: err.message})
})
